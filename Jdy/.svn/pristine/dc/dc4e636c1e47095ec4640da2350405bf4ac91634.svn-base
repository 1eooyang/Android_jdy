package com.app.jdy.ui;

import java.io.File;
import java.util.UUID;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.app.jdy.R;
import com.app.jdy.utils.BitmapUtils;
import com.app.jdy.utils.URLs;

/**
 * @author spring sky<br>
 *         Email :vipa1888@163.com<br>
 *         QQ: 840950105<br>
 * @version 创建时间：2012-11-22 上午9:20:03 说明：主要用于选择文件操作
 */

public class SelectPicActivity extends Activity implements OnClickListener {

	/***
	 * 使用照相机拍照获取图片
	 */
	public static final int SELECT_PIC_BY_TACK_PHOTO = 1;
	/***
	 * 使用相册中的图片
	 */
	public static final int SELECT_PIC_BY_PICK_PHOTO = 2;

	/***
	 * 从Intent获取图片路径的KEY
	 */
	public static final String KEY_PHOTO_PATH = "photo_path";

	private static final String TAG = "SelectPicActivity";

	private LinearLayout dialogLayout;
	private Button takePhotoBtn, pickPhotoBtn, cancelBtn;

	/** 获取到的图片路径 */
	private String picPath;

	private String tempPath;// 临时图片路径

	private Intent lastIntent;

	private Uri photoUri;
	private ImageView picPriview;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.select_pic_layout);
		initView();
	}

	/**
	 * 初始化加载View
	 */
	private void initView() {
		dialogLayout = (LinearLayout) findViewById(R.id.dialog_layout);
		dialogLayout.setOnClickListener(this);
		takePhotoBtn = (Button) findViewById(R.id.btn_take_photo);
		takePhotoBtn.setOnClickListener(this);
		pickPhotoBtn = (Button) findViewById(R.id.btn_pick_photo);
		pickPhotoBtn.setOnClickListener(this);
		cancelBtn = (Button) findViewById(R.id.btn_cancel);
		cancelBtn.setOnClickListener(this);
		picPriview = (ImageView) findViewById(R.id.picPriview);
		lastIntent = getIntent();

		// 给图片赋上已选择的图片
		tempPath = lastIntent.getStringExtra(KEY_PHOTO_PATH);
		if (tempPath != null) {
			// Bitmap bitMap = BitmapUtils.compressBmpFromFile(picPath);
			Bitmap bitMap = BitmapFactory.decodeFile(tempPath);
			picPriview.setImageBitmap(bitMap);
		}
		// Log.i(TAG, picPath);
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.dialog_layout:
			break;
		case R.id.btn_take_photo:
			takePhoto();
			break;
		case R.id.btn_pick_photo:
			pickPhoto();
			break;
		case R.id.btn_cancel:
			lastIntent.putExtra(KEY_PHOTO_PATH, tempPath);
			setResult(Activity.RESULT_OK, lastIntent);
			finish();
		default:
			break;
		}
	}

	/**
	 * 拍照获取图片
	 */
	private void takePhoto() {
		// 执行拍照前，应该先判断SD卡是否存在
		String SDState = Environment.getExternalStorageState();
		if (SDState.equals(Environment.MEDIA_MOUNTED)) {
			Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);// "android.media.action.IMAGE_CAPTURE"
			/***
			 * 需要说明一下，以下操作使用照相机拍照，拍照后的图片会存放在相册中的 这里使用的这种方式有一个好处就是获取的图片是拍照后的原图
			 * 如果不实用ContentValues存放照片路径的话，拍照后获取的图片为缩略图不清晰
			 */
			ContentValues values = new ContentValues();
			photoUri = this.getContentResolver().insert(
					MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
			intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, photoUri);
			/** ----------------- */
			startActivityForResult(intent, SELECT_PIC_BY_TACK_PHOTO);
		} else {
			Toast.makeText(this, "内存卡不存在", Toast.LENGTH_LONG).show();
		}
	}

	/***
	 * 从相册中取图片
	 */
	private void pickPhoto() {
		Intent intent = new Intent();
		intent.setType("image/*");
		if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
			intent.setAction(Intent.ACTION_OPEN_DOCUMENT);
		} else {
			intent.setAction(Intent.ACTION_GET_CONTENT);
		}
		startActivityForResult(intent, SELECT_PIC_BY_PICK_PHOTO);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (resultCode == Activity.RESULT_OK) {
			doPhoto(requestCode, data);
		}
		super.onActivityResult(requestCode, resultCode, data);
	}

	/**
	 * 选择图片后，获取图片的路径
	 * 
	 * @param requestCode
	 * @param data
	 */
	private void doPhoto(int requestCode, Intent data) {
		ContentResolver cr = this.getContentResolver();
		String[] pojo = { MediaStore.Images.Media.DATA };
		Cursor cursor = null;
		if (requestCode == SELECT_PIC_BY_PICK_PHOTO) // 从相册取图片，有些手机有异常情况，请注意
		{
			if (data == null) {
				Toast.makeText(this, "选择图片文件出错", Toast.LENGTH_LONG).show();
				return;
			}
			photoUri = data.getData();
			if (photoUri == null) {
				Toast.makeText(this, "选择图片文件出错", Toast.LENGTH_LONG).show();
				return;
			}
			
			if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
				String wholeID = DocumentsContract.getDocumentId(photoUri);
				String id = wholeID.split(":")[1];

				String sel = MediaStore.Images.Media._ID + "=?";
				cursor = cr.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
						pojo, sel, new String[] { id }, null);
			} else {
				cursor = cr.query(photoUri, pojo, null, null, null);
			}
		} else if (requestCode == SELECT_PIC_BY_TACK_PHOTO) { // 拍照
			cursor = cr.query(photoUri, pojo, null, null, null);
		}
		
		if (cursor != null) {
			int columnIndex = cursor.getColumnIndexOrThrow(pojo[0]);
			if (cursor.moveToFirst()) {
				picPath = cursor.getString(columnIndex);
			}
			cursor.close();
		}
		// Cursor cursor = managedQuery(photoUri, pojo, null, null, null);
		// 一般用Cursor后， 就立即close()了，但是在用managedQuery的时候， 却不能主动调用close()方法，
		// 否则在Android 4.0+的系统上， 会发生崩溃;要么判断>14时不Close

		Log.i(TAG, "imagePath = " + picPath);
		if (picPath != null
				&& (picPath.endsWith(".png") || picPath.endsWith(".PNG")
						|| picPath.endsWith(".jpg") || picPath.endsWith(".JPG"))) {
			Bitmap bitMap = BitmapUtils.compressBmpFromFile(picPath);
			picPriview.setImageBitmap(bitMap);

			String tempName = picPath.substring(picPath.lastIndexOf("/") + 1);

			tempPath = URLs.TEMP_DIR + File.separator + tempName;

			// 构造新选择的文件到tempPath路径指向的文件
			BitmapUtils.BitmapToFile(bitMap, URLs.TEMP_DIR, tempName);
		} else {
			Toast.makeText(this, "选择图片文件不正确", Toast.LENGTH_LONG).show();
		}
	}
}
