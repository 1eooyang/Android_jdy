package com.app.jdy.activity;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import android.app.TabActivity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewTreeObserver.OnPreDrawListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.TabHost;
import android.widget.TextView;
import android.widget.Toast;

import com.app.jdy.R;
import com.app.jdy.adapter.SearchListViewAdapter;
import com.app.jdy.ui.FollowActivity;
import com.app.jdy.ui.LoginActivity;
import com.app.jdy.utils.BitmapUtils;
import com.app.jdy.utils.CommonUtils;
import com.app.jdy.utils.Constants;
import com.app.jdy.utils.HttpUtils;
import com.app.jdy.utils.UIUtils;
import com.app.jdy.utils.URLs;
import com.slidingmenu.lib.SlidingMenu;

/**
 * 
 * description :MainActivity
 * 
 * @version 1.0
 * @author zhonghuixiong
 * @createtime : 2015-3-14 上午12:13:15
 * 
 *             修改历史: 修改人 修改时间 修改内容 --------------- -------------------
 *             ----------------------------------- zhonghuixiong 2015-3-14
 *             上午12:13:15
 * 
 */
@SuppressWarnings("deprecation")
public class MainActivity extends TabActivity implements
		OnCheckedChangeListener {
	private TabHost tabHost;
	private RadioGroup radioderGroup;
	private long mExitTime;
	/**
	 * 侧滑搜索相关
	 */
	private Context context;
	private SlidingMenu menu;
	private List<String> strs;
	private SearchListViewAdapter searchListViewAdapter;
	private ListView lv_search;
	private Button btn_search;
	private TextView tv_search;
	private EditText edit_search;
	private SlidingMenuReceiver slidingMenuReceiver;
	private SlidingMenuDismissReceiver slidingMenuDismissReceiver;
	private LinearLayout slidingMenuLayout;
	private ResetMainPageBroadcastReceiver resetMainPageBroadcastReceiver;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_tab);
		tabHost = this.getTabHost();
		tabHost.addTab(tabHost.newTabSpec("1").setIndicator("1")
				.setContent(new Intent(this, HomeActivity.class)));
		tabHost.addTab(tabHost.newTabSpec("2").setIndicator("2")
				.setContent(new Intent(this, GoldActivity.class)));
		tabHost.addTab(tabHost.newTabSpec("3").setIndicator("3")
				.setContent(new Intent(this, MyActivity.class)));

		radioderGroup = (RadioGroup) findViewById(R.id.main_radio);
		radioderGroup.setOnCheckedChangeListener(this);
		radioderGroup.check(R.id.mainTabs_radio_home);// 默认第一个按钮

		RadioButton mainTabs_radio_home = (RadioButton) findViewById(R.id.mainTabs_radio_home);
		RadioButton mainTabs_radio_msg = (RadioButton) findViewById(R.id.mainTabs_radio_msg);
		RadioButton mainTabs_radio_selfInfo = (RadioButton) findViewById(R.id.mainTabs_radio_selfInfo);

		UIUtils.changeRadioButtonImageSize(mainTabs_radio_home, 1, 26, 26);
		UIUtils.changeRadioButtonImageSize(mainTabs_radio_msg, 1, 26, 26);
		UIUtils.changeRadioButtonImageSize(mainTabs_radio_selfInfo, 1, 26, 26);
		/**
		 * 侧滑搜索
		 */
		context = this;
		menu = new SlidingMenu(this);
		menu.setMode(SlidingMenu.RIGHT);
		menu.setTouchModeAbove(SlidingMenu.TOUCHMODE_NONE);
		menu.setShadowWidthRes(R.dimen.shadow_width);
		menu.setBehindOffsetRes(R.dimen.slidingmenu_offset);
		menu.setFadeDegree(0.35f);
		menu.attachToActivity(this, SlidingMenu.SLIDING_CONTENT);
		View view = LayoutInflater.from(this).inflate(
				R.layout.search_popuwindow, null);
		edit_search = (EditText) view.findViewById(R.id.edit_search);
		menu.setMenu(view);
		slidingMenuReceiver = new SlidingMenuReceiver();
		IntentFilter intentFilter = new IntentFilter(
				"org.jdy.action.SlidingMenu_BROADCAST");
		slidingMenuDismissReceiver = new SlidingMenuDismissReceiver();
		IntentFilter intentFilter4 = new IntentFilter(
				"org.jdy.action.SlidingMenuDismiss_BROADCAST");
		resetMainPageBroadcastReceiver = new ResetMainPageBroadcastReceiver();
		IntentFilter intentFilter5 = new IntentFilter(
				"com.app.jdy.sender.ResetMainPage_BroadCast");
		registerReceiver(slidingMenuReceiver, intentFilter);
		registerReceiver(slidingMenuDismissReceiver, intentFilter4);
		registerReceiver(resetMainPageBroadcastReceiver, intentFilter5);

		slidingMenuLayout = (LinearLayout) findViewById(R.id.slidingmenu);
		final Bitmap bitmap = BitmapFactory.decodeResource(getResources(),
				R.drawable.sliding_bg);
		slidingMenuLayout.getViewTreeObserver().addOnPreDrawListener(
				new OnPreDrawListener() {
					@Override
					public boolean onPreDraw() {
						blur(bitmap, slidingMenuLayout);
						return true;
					}
				});
		initData();
		lv_search = (ListView) view.findViewById(R.id.lv_search);
		searchListViewAdapter = new SearchListViewAdapter(strs,
				MainActivity.this);
		lv_search.setAdapter(searchListViewAdapter);
		lv_search.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> arg0, View view,
					int position, long arg3) {
				if (HttpUtils.isNetworkConnected(MainActivity.this) == true) {
					tv_search = (TextView) view.findViewById(R.id.tv_search);
					Intent intent = new Intent();
					intent.setAction("org.jdy.action.LV_SEARCH_BROADCAST");
					intent.putExtra("search_ProdType", CommonUtils
							.CodeForName(tv_search.getText().toString()));
					sendBroadcast(intent);
				} else {
					menu.toggle(true);
					Toast.makeText(MainActivity.this, Constants.NO_INTENT_TIPS,
							Toast.LENGTH_SHORT).show();
				}
			};

		});
		edit_search.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				// TODO Auto-generated method stub
				// searchListViewAdapter.getFilter().filter(s);
			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub

			}

			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub

			}
		});
		btn_search = (Button) view.findViewById(R.id.btn_search);
		/**
		 * 取消搜索按钮事件
		 */
		btn_search.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				CommonUtils.HideKeyBoard(MainActivity.this, edit_search);
				if (HttpUtils.isNetworkConnected(MainActivity.this) == true) {
					Intent intent = new Intent();
					intent.setAction("org.jdy.action.KEYWORD_SEARCH_BROADCAST");
					intent.putExtra("search_keyWord", edit_search.getText()
							.toString());
					sendBroadcast(intent);
				} else {
					menu.toggle(true);
					Toast.makeText(MainActivity.this, Constants.NO_INTENT_TIPS,
							Toast.LENGTH_SHORT).show();
				}
			}
		});
	}

	private void initData() {
		// TODO Auto-generated method stub
		strs = new ArrayList<String>();
		strs.add("银行理财");
		strs.add("保险理财");
		strs.add("公募基金");
		strs.add("信托理财");
		strs.add("资管理财");
		strs.add("债权众筹");
		strs.add("股权众筹");
		strs.add("私募基金");
	}

	@Override
	public void onCheckedChanged(RadioGroup group, int checkedId) {
		switch (checkedId) {
		case R.id.mainTabs_radio_home:
			tabHost.setCurrentTabByTag("1");
			break;
		case R.id.mainTabs_radio_msg:

			tabHost.setCurrentTabByTag("2");
			break;
		case R.id.mainTabs_radio_selfInfo:
			if (CommonUtils.checkLogin(MainActivity.this) == true) {
				tabHost.setCurrentTabByTag("3");
			} else {
				Intent intent = new Intent(MainActivity.this,
						LoginActivity.class);
				startActivity(intent);
			}
			break;
		}

	}

	/**
	 * 
	 * @author zhonghuixiong
	 * @createtime 2015-2-7 下午5:48:27
	 * @Decription 删除临时文件
	 * 
	 * @param filePath
	 * @param deleteThisPath
	 */
	public void deleteFolderFile(String filePath, boolean deleteThisPath) {
		if (!TextUtils.isEmpty(filePath)) {
			try {
				File file = new File(filePath);
				if (file.isDirectory()) {// 处理目录
					File files[] = file.listFiles();
					for (int i = 0; i < files.length; i++) {
						deleteFolderFile(files[i].getAbsolutePath(), true);
					}
				}
				if (deleteThisPath) {
					if (!file.isDirectory()) {// 如果是文件，删除
						file.delete();
					} else {// 目录
						if (file.listFiles().length == 0) {// 目录下没有文件或者目录，删除
							file.delete();
						}
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	/**
	 * 
	 * description :侧滑展开广播通知
	 * 
	 * @version 1.0
	 * @author zhonghuixiong
	 * @createtime : 2015-1-29 下午5:33:44
	 * 
	 *             修改历史: 修改人 修改时间 修改内容 --------------- -------------------
	 *             ----------------------------------- zhonghuixiong 2015-1-29
	 *             下午5:33:44
	 * 
	 */
	public class SlidingMenuReceiver extends BroadcastReceiver {
		@Override
		public void onReceive(Context context, Intent intent) {
			menu.showMenu();
		}
	}

	/**
	 * 
	 * description :侧滑展开广播通知
	 * 
	 * @version 1.0
	 * @author zhonghuixiong
	 * @createtime : 2015-1-29 下午5:33:44
	 * 
	 *             修改历史: 修改人 修改时间 修改内容 --------------- -------------------
	 *             ----------------------------------- zhonghuixiong 2015-1-29
	 *             下午5:33:44
	 * 
	 */
	public class SlidingMenuDismissReceiver extends BroadcastReceiver {
		@Override
		public void onReceive(Context context, Intent intent) {
			menu.toggle(true);
		}
	}

	/**
	 * 注册完成等操作后,返回主页面框架的第一页
	 */
	public class ResetMainPageBroadcastReceiver extends BroadcastReceiver {
		@Override
		public void onReceive(Context context, Intent intent) {
			radioderGroup.check(R.id.mainTabs_radio_home);
		}
	}

	private void blur(Bitmap bkg, View view) {
		float scaleFactor = 8;
		float radius = 2;

		Bitmap overlay = Bitmap.createBitmap(
				(int) (view.getMeasuredWidth() / scaleFactor),
				(int) (view.getMeasuredHeight() / scaleFactor),
				Bitmap.Config.ARGB_8888);
		Canvas canvas = new Canvas(overlay);
		canvas.translate(-view.getLeft() / scaleFactor, -view.getTop()
				/ scaleFactor);
		canvas.scale(1 / scaleFactor, 1 / scaleFactor);
		Paint paint = new Paint();
		paint.setFlags(Paint.FILTER_BITMAP_FLAG);
		canvas.drawBitmap(bkg, 0, 0, paint);

		overlay = BitmapUtils.doBlur(overlay, (int) radius, true);
		view.setBackgroundDrawable(new BitmapDrawable(getResources(), overlay));
	}

	@Override
	public boolean dispatchKeyEvent(KeyEvent event) {
		if (event.getKeyCode() == KeyEvent.KEYCODE_BACK
				&& event.getAction() == KeyEvent.ACTION_DOWN
				&& event.getRepeatCount() == 0) {
			if ((System.currentTimeMillis() - mExitTime) > 2000) {
				Toast.makeText(this, "再按一次退出程序", Toast.LENGTH_SHORT).show();
				mExitTime = System.currentTimeMillis();
			} else {
				deleteFolderFile(URLs.TEMP_DIR, true);
				finish();
			}
			return true;
		}
		return super.dispatchKeyEvent(event);
	}

	@Override
	protected void onDestroy() {
		unregisterReceiver(slidingMenuReceiver);
		unregisterReceiver(slidingMenuDismissReceiver);
		unregisterReceiver(resetMainPageBroadcastReceiver);
		super.onDestroy();
	}

}
